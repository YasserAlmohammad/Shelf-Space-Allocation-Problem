/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ssap;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import org.chocosolver.solver.search.loop.monitors.IMonitorSolution;
import org.chocosolver.solver.search.solution.Solution;

/**
 *
 * @author Author
 */
public class SSAP_MainUI extends javax.swing.JFrame implements IMonitorSolution{

    public SSAP ssap=null;
    public Data data=null;
    Timer timer=null;
    int lastSolution=-1;
    Chart chart2;
    PlanogramUI planogramUI;
    int solu_count=0;
    public static SSAP_MainUI gui=null;
    int used_space;
    /**
     * Creates new form SSAP_MainUI
     */
    public SSAP_MainUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel_Top = new javax.swing.JPanel();
        jScrollPane_products = new javax.swing.JScrollPane();
        jTable_Products = new javax.swing.JTable();
        jScrollPane_shelves = new javax.swing.JScrollPane();
        jTable_Shelves = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblTotalShelfSpace = new javax.swing.JLabel();
        lblUsedSpace = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblMinSpace = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblRemaining = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblProductCount = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblShelvesCount = new javax.swing.JLabel();
        btn_load = new javax.swing.JButton();
        btn_solve = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_products_solution = new javax.swing.JTable();
        btn_stop_execution = new javax.swing.JButton();
        lblObjective = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_shelves_occupancy = new javax.swing.JTable();
        btnSavePlanogram = new javax.swing.JButton();
        comboFiles = new javax.swing.JComboBox();
        comboLNS = new javax.swing.JComboBox();
        comboLexico = new javax.swing.JComboBox();
        btnLoadFile = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable_Products.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Family", "ID", "facing length", "min facings", "max facings", "profit"
            }
        ));
        jScrollPane_products.setViewportView(jTable_Products);

        jTable_Shelves.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "RowID", "shelf coefficient", "part coefficient"
            }
        ));
        jScrollPane_shelves.setViewportView(jTable_Shelves);

        jLabel1.setText("Total Shelf Space:");

        jLabel3.setText("Used Shelf Space:");

        lblTotalShelfSpace.setForeground(new java.awt.Color(153, 0, 153));
        lblTotalShelfSpace.setText("........");

        lblUsedSpace.setForeground(new java.awt.Color(0, 153, 0));
        lblUsedSpace.setText("........");

        jLabel4.setText("Mininum Space Requied:");

        lblMinSpace.setForeground(new java.awt.Color(153, 0, 153));
        lblMinSpace.setText("........");

        jLabel5.setText("Remaining Empty Space:");

        lblRemaining.setForeground(new java.awt.Color(0, 153, 0));
        lblRemaining.setText("........");

        jLabel6.setText("N. Products:");

        lblProductCount.setForeground(new java.awt.Color(153, 0, 153));
        lblProductCount.setText("........");

        jLabel7.setText("N. Shelves:");

        lblShelvesCount.setForeground(new java.awt.Color(153, 0, 153));
        lblShelvesCount.setText("........");

        javax.swing.GroupLayout jPanel_TopLayout = new javax.swing.GroupLayout(jPanel_Top);
        jPanel_Top.setLayout(jPanel_TopLayout);
        jPanel_TopLayout.setHorizontalGroup(
            jPanel_TopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_TopLayout.createSequentialGroup()
                .addComponent(jScrollPane_products)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_TopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane_shelves, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel_TopLayout.createSequentialGroup()
                        .addGroup(jPanel_TopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel_TopLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblUsedSpace))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel_TopLayout.createSequentialGroup()
                                .addGroup(jPanel_TopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel_TopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblProductCount)
                                    .addComponent(lblTotalShelfSpace))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel_TopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel_TopLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblRemaining))
                            .addGroup(jPanel_TopLayout.createSequentialGroup()
                                .addGroup(jPanel_TopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel_TopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblShelvesCount)
                                    .addComponent(lblMinSpace)))))))
        );
        jPanel_TopLayout.setVerticalGroup(
            jPanel_TopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane_products, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(jPanel_TopLayout.createSequentialGroup()
                .addComponent(jScrollPane_shelves, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_TopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(lblProductCount)
                    .addComponent(jLabel7)
                    .addComponent(lblShelvesCount))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_TopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblTotalShelfSpace)
                    .addComponent(jLabel4)
                    .addComponent(lblMinSpace))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel_TopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lblUsedSpace)
                    .addComponent(jLabel5)
                    .addComponent(lblRemaining)))
        );

        btn_load.setText("Load sample");
        btn_load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_loadActionPerformed(evt);
            }
        });

        btn_solve.setText("run solver");
        btn_solve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_solveActionPerformed(evt);
            }
        });

        table_products_solution.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "product name", "product family", "product id", "number of facings", "start pos", "Row"
            }
        ));
        jScrollPane1.setViewportView(table_products_solution);

        btn_stop_execution.setText("Stop Execution");
        btn_stop_execution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_stop_executionActionPerformed(evt);
            }
        });

        lblObjective.setForeground(new java.awt.Color(0, 153, 0));
        lblObjective.setText("Objective (Profit)");

        jLabel2.setText("Objective:");

        table_shelves_occupancy.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Row ID", "Row Occupancy"
            }
        ));
        jScrollPane2.setViewportView(table_shelves_occupancy);

        btnSavePlanogram.setText("save planogram images");
        btnSavePlanogram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSavePlanogramActionPerformed(evt);
            }
        });

        comboFiles.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "sample1.txt", "sample2.txt", "sample3.txt", "sample4.txt","sample5.txt","sample6.txt","sample7.txt"}));
        comboFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboFilesActionPerformed(evt);
            }
        });

        comboLNS.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "RLNS", "PLNS"}));

        comboLexico.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Lexico_UB", "Lexico_LB" }));

        btnLoadFile.setText("load file");
        btnLoadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_Top, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(comboFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comboLNS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboLexico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_load)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLoadFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_solve)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_stop_execution)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSavePlanogram)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblObjective, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel_Top, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_load)
                        .addComponent(btn_solve)
                        .addComponent(btn_stop_execution)
                        .addComponent(btnSavePlanogram)
                        .addComponent(comboFiles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboLNS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboLexico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnLoadFile))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblObjective)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_loadActionPerformed
        DefaultTableModel products_table_model=(DefaultTableModel)jTable_Products.getModel();
        if (products_table_model.getRowCount() > 0) {
            for (int i = products_table_model.getRowCount() - 1; i > -1; i--) {
                products_table_model.removeRow(i);
            }
        }
        //open file box
        String filename=(String)comboFiles.getSelectedItem();
        data=ParseData.parse(ParseData.getDataFromResource("/testdata/"+filename));
        for(int i=0;i<data.n_products;i++){
            Object[] row=new Object[7];
            row[0]=data.product_name[i];
            row[1]=data.product_family[i];
            row[2]=data.products[i][0];
            row[3]=data.products[i][1];
            row[4]=data.products[i][2];
            row[5]=data.products[i][3];
            row[6]=(double)(data.products[i][4])/SSAP.SCALE_FACTOR; //divide by scale factor to get correct view
            products_table_model.addRow(row);
        }
        jTable_Products.setModel(products_table_model);
        
        DefaultTableModel shelves_table_model=(DefaultTableModel)jTable_Shelves.getModel();
        if (shelves_table_model.getRowCount() > 0) {
            for (int i = shelves_table_model.getRowCount() - 1; i > -1; i--) {
                shelves_table_model.removeRow(i);
            }
        }
        for(int i=0;i<data.n_shelves;i++){
            Object[] row=new Object[3];
            row[0]=data.shelves[i][0];
            row[1]=(double)(data.shelves[i][2])/SSAP.SCALE_FACTOR;
            row[2]=(double)(data.shelves[i][3])/SSAP.SCALE_FACTOR;
            shelves_table_model.addRow(row);
        }
        jTable_Shelves.setModel(shelves_table_model);
        used_space=0;
        ssap=new SSAP(data  );
        lblProductCount.setText(data.n_products+"");
        lblShelvesCount.setText(data.n_shelves+"");
        lblMinSpace.setText(ssap.min_space+"");
        lblTotalShelfSpace.setText(data.n_shelves*data.shelf_width+"");
    }//GEN-LAST:event_btn_loadActionPerformed

    private void btn_solveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_solveActionPerformed
        if(ssap==null)
            JOptionPane.showMessageDialog(this, "You Must Choose a File first");
        else{
            if(!ssap.canBeSolved){
                JOptionPane.showMessageDialog(this, "Problem Cant Be Solved, You Need More Shelves To Meet Minimum Requirements");
                return;
            }
            gui=this;
            ssap.method=(String)comboLNS.getSelectedItem();
            ssap.lexico=(String)comboLexico.getSelectedItem();
            Thread t=new Thread(){  
                        public void run(){
                            try{
                                String[] args={};
                                 ssap.solveProblem(gui,args);
                            }
                            catch(Exception ex){
                                JOptionPane.showMessageDialog(gui,"Exception thrown, something wrong happened.");
                                ex.printStackTrace();
                            }
                        }
                    };
            SSAP.exectuting=true;
            t.start();

            //create a timer to update GUI with the solution
            //create  thread to update the GUI
            int delay = 500; //milliseconds
            ActionListener taskPerformer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                        DefaultTableModel model=new DefaultTableModel();
                        model.addColumn("prduct name");
                        model.addColumn("prduct family");
                        model.addColumn("product id");
                        model.addColumn("number of facings");
                        model.addColumn("start position");
                        model.addColumn("Occupancy");
                        model.addColumn("Shelf");
                
                         Solution s=SSAP.solver.getSolutionRecorder().getLastSolution();
                         if(s==null)
                             return;
                         int currentSolution=s.getIntVal(SSAP.objective);
                         if(lastSolution!=currentSolution){
                            lastSolution=currentSolution;
                            //calc starting position for each product in the shelf!
                            int prod_start_pos[]=new int[data.n_products]; //start position in a shelf
                                                      //update GUI Planograms
                            ArrayList<ProductDrawingData> []shelves=new ArrayList[data.n_shelves];
                            
                            for(int j=0;j<data.n_shelves;j++){
                                int pos=0;
                                shelves[j]=new ArrayList<ProductDrawingData>();
                                for(int i=0;i<data.n_products;i++){
                                    if(s.getIntVal(SSAP.shelves[i][j])==1){ //product on shelf
                                        prod_start_pos[i]=pos;
                                        pos=pos+s.getIntVal(SSAP.product_facings[i])*data.products[i][SSAP.FACING_LENGTH_INDEX];
                                        //add product to the planogram queue of that shelf
                                        ProductDrawingData drawingData=new ProductDrawingData(data.product_name[i], data.product_family[i],
                                                s.getIntVal(SSAP.product_facings[i]), prod_start_pos[i], data.products[i][SSAP.FACING_LENGTH_INDEX], i+1);
                                        shelves[j].add(drawingData);
                                    }
                                }
                            }
                            planogramUI.updateData(shelves);
                            for(int j=0;j<data.n_products;j++){
                                Object[] row=new Object[7];
                                row[0]=data.product_name[j];
                                row[1]=data.product_family[j];
                                
                                row[2]=""+data.products[j][0];
                                row[3]=s.getIntVal(SSAP.product_facings[j]);
                                row[4]=prod_start_pos[j];//SSAP.prod_start_pos[j];//s.getIntVal(SSAP.product_start_pos[j]);
                                row[5]=s.getIntVal(SSAP.product_occupancy[j]);//1 is facing length index
                                row[6]=s.getIntVal(SSAP.product_shelf[j])+1;
                                model.addRow(row);
                            }
                            table_products_solution.setModel(model);
                            
                            //update shelves data
                            
                            DefaultTableModel shelf_table_model=new DefaultTableModel();
                            shelf_table_model.addColumn("shelf id");
                            shelf_table_model.addColumn("shelf current occupancy");
                            used_space=0;
                            for(int j=0;j<data.n_shelves;j++){
                                Object[] row=new Object[2];  
                                row[0]=""+data.shelves[j][SSAP.SHELF_PART_ID_INDEX]; //0 contains id
                                int s_occupancy=s.getIntVal(SSAP.shelf_occupancy[j]);
                                row[1]=""+s_occupancy;
                                used_space+=s_occupancy;
                                shelf_table_model.addRow(row);
                            }
                            table_shelves_occupancy.setModel(shelf_table_model);
                            lblUsedSpace.setText(""+used_space);
                            lblRemaining.setText(""+(data.n_shelves*data.shelf_width-used_space));
  
                         }
                         
                }
            };
            timer=new Timer(delay, taskPerformer);
            timer.start();
            solu_count=0;
        //    chart=new Chart();
       //     chart.setVisible(true);
            chart2=new Chart("Shelf Space Allocation Problem" , "Objective Function (maximize profit)");
            chart2.setVisible(true);
            planogramUI=new PlanogramUI(ssap.shelf_length,data.n_shelves,data.n_products);
            planogramUI.setVisible(true);
        }   
    }//GEN-LAST:event_btn_solveActionPerformed

    private void btn_stop_executionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_stop_executionActionPerformed
        if(SSAP.exectuting){
            SSAP.solver.unplugAllMonitors();
            SSAP.exectuting=false;
            
            if(timer!=null)
                timer.stop();
                StopCriteria.stopSearch=true;
                lastSolution=-1;  
                chart2.dispose();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_btn_stop_executionActionPerformed

    private void btnSavePlanogramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSavePlanogramActionPerformed
        JFileChooser dlg=new JFileChooser();
        if(dlg.showSaveDialog(this)==JFileChooser.APPROVE_OPTION){
            File file=dlg.getSelectedFile();
            planogramUI.savePlanoGrams(file);
        }
    }//GEN-LAST:event_btnSavePlanogramActionPerformed

    private void comboFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboFilesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboFilesActionPerformed

    private void btnLoadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadFileActionPerformed
        DefaultTableModel products_table_model=(DefaultTableModel)jTable_Products.getModel();
        if (products_table_model.getRowCount() > 0) {
            for (int i = products_table_model.getRowCount() - 1; i > -1; i--) {
                products_table_model.removeRow(i);
            }
        }
        //open file box
        JFileChooser choose=new JFileChooser();
        String filename="";
        if(choose.showDialog(this, "Load Selected File?")==JFileChooser.APPROVE_OPTION){
            filename=choose.getSelectedFile().getAbsolutePath();
        }
        else
            return;
        data=ParseData.parse(ParseData.getDataFromFile(filename));
        for(int i=0;i<data.n_products;i++){
            Object[] row=new Object[7];
            row[0]=data.product_name[i];
            row[1]=data.product_family[i];
            row[2]=data.products[i][0];
            row[3]=data.products[i][1];
            row[4]=data.products[i][2];
            row[5]=data.products[i][3];
            row[6]=(double)(data.products[i][4])/SSAP.SCALE_FACTOR; //divide by scale factor to get correct view
            products_table_model.addRow(row);
        }
        jTable_Products.setModel(products_table_model);
        
        DefaultTableModel shelves_table_model=(DefaultTableModel)jTable_Shelves.getModel();
        if (shelves_table_model.getRowCount() > 0) {
            for (int i = shelves_table_model.getRowCount() - 1; i > -1; i--) {
                shelves_table_model.removeRow(i);
            }
        }
        for(int i=0;i<data.n_shelves;i++){
             Object[] row=new Object[3];
            row[0]=data.shelves[i][0];
            row[1]=(double)(data.shelves[i][2])/SSAP.SCALE_FACTOR;
            row[2]=(double)(data.shelves[i][3])/SSAP.SCALE_FACTOR;
            shelves_table_model.addRow(row);
        }
        jTable_Shelves.setModel(shelves_table_model);
        used_space=0;
        ssap=new SSAP(data  );
        lblProductCount.setText(data.n_products+"");
        lblShelvesCount.setText(data.n_shelves+"");
        lblMinSpace.setText(ssap.min_space+"");
        lblTotalShelfSpace.setText(data.n_shelves*data.shelf_width+"");        // TODO add your handling code here:
    }//GEN-LAST:event_btnLoadFileActionPerformed
    
    @Override
    public void onSolution() {
        Solution s=SSAP.solver.getSolutionRecorder().getLastSolution();
        if(s==null)
            return;
        int val=SSAP.solver.getSolutionRecorder().getLastSolution().getIntVal(SSAP.objective);
        chart2.dataset.addValue(new Double((double)(val)/(SSAP.SCALE_FACTOR*SSAP.SCALE_FACTOR)), "objective", ""+solu_count++);
        lblObjective.setText("KD "+(double)(val)/(SSAP.SCALE_FACTOR*SSAP.SCALE_FACTOR)); //2*SCAL_FACTOR: because we scaled profit and coefficients
     //   labelSolutionCost.setText(":"+s);
     //   txtInfo.setText(ALP.solver.getMeasures().toString());
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SSAP_MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SSAP_MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SSAP_MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SSAP_MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SSAP_MainUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLoadFile;
    private javax.swing.JButton btnSavePlanogram;
    private javax.swing.JButton btn_load;
    private javax.swing.JButton btn_solve;
    private javax.swing.JButton btn_stop_execution;
    private javax.swing.JComboBox comboFiles;
    private javax.swing.JComboBox comboLNS;
    private javax.swing.JComboBox comboLexico;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel_Top;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane_products;
    private javax.swing.JScrollPane jScrollPane_shelves;
    private javax.swing.JTable jTable_Products;
    private javax.swing.JTable jTable_Shelves;
    private javax.swing.JLabel lblMinSpace;
    private javax.swing.JLabel lblObjective;
    private javax.swing.JLabel lblProductCount;
    private javax.swing.JLabel lblRemaining;
    private javax.swing.JLabel lblShelvesCount;
    private javax.swing.JLabel lblTotalShelfSpace;
    private javax.swing.JLabel lblUsedSpace;
    private javax.swing.JTable table_products_solution;
    private javax.swing.JTable table_shelves_occupancy;
    // End of variables declaration//GEN-END:variables
}
